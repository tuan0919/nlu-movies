{"version":3,"sources":["ParallaxImage.tsx"],"names":["ParallaxImageStatus","ParallaxImage","Component","constructor","props","state","offset","width","height","status","LOADING","animOpacity","Animated","Value","_onLoad","bind","_onError","_measureLayout","setNativeProps","nativeProps","_container","componentDidMount","_mounted","setTimeout","componentWillUnmount","dimensions","carouselRef","nodeHandle","measureLayout","x","y","vertical","sliderHeight","itemHeight","sliderWidth","itemWidth","setState","Math","ceil","event","fadeDuration","onLoad","LOADED","timing","toValue","duration","easing","Easing","out","quad","isInteraction","useNativeDriver","start","TRANSITION_FINISHED","onError","ERROR","image","scrollPosition","parallaxFactor","style","AnimatedImageComponent","other","parallaxPadding","requiredStyles","position","dynamicStyles","opacity","transform","translateX","interpolate","inputRange","outputRange","extrapolate","translateY","styles","undefined","spinner","showSpinner","spinnerColor","loaderContainer","render","containerStyle","c","container","Image"],"mappings":"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","sourcesContent":["// Parallax effect inspired by https://github.com/oblador/react-native-parallax/\r\n\r\nimport React, { Component } from 'react';\r\nimport {\r\n    View,\r\n    Animated,\r\n    Easing,\r\n    ActivityIndicator,\r\n    findNodeHandle,\r\n    ImageProps,\r\n    StyleProp,\r\n    ViewStyle,\r\n    NativeSyntheticEvent,\r\n    ImageLoadEventData,\r\n    ImageErrorEventData\r\n} from 'react-native';\r\nimport styles from './ParallaxImage.style';\r\n\r\ntype VerticalProps = {\r\n    vertical: true;\r\n    sliderHeight: number; // passed from <Carousel />\r\n    itemHeight: number; // passed from <Carousel />\r\n}\r\ntype HorizontalProps = {\r\n    vertical: false;\r\n    sliderWidth: number; // passed from <Carousel />\r\n    itemWidth: number; // passed from <Carousel />\r\n}\r\n\r\ntype ParallaxImageProps = {\r\n  carouselRef: Parameters<typeof findNodeHandle>[0]; // passed from <Carousel />\r\n  scrollPosition: Animated.Value | undefined; // passed from <Carousel />\r\n  containerStyle: StyleProp<ViewStyle>;\r\n  dimensions?: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  fadeDuration: number;\r\n  parallaxFactor: number;\r\n  showSpinner: boolean;\r\n  spinnerColor: string;\r\n  AnimatedImageComponent: typeof Animated.Image;\r\n} & ImageProps & (VerticalProps | HorizontalProps);\r\n\r\nexport enum ParallaxImageStatus {\r\n    'LOADING' = 1,\r\n    'LOADED' = 2,\r\n    'TRANSITION_FINISHED' = 3,\r\n    'ERROR' = 4\r\n}\r\n\r\ntype ParallaxImageState = {\r\n  offset: number;\r\n  width: number;\r\n  height: number;\r\n  status: ParallaxImageStatus;\r\n  animOpacity: Animated.Value;\r\n};\r\n\r\nexport default class ParallaxImage extends Component<\r\n  ParallaxImageProps,\r\n  ParallaxImageState\r\n> {\r\n  static defaultProps = {\r\n      containerStyle: {},\r\n      fadeDuration: 500,\r\n      parallaxFactor: 0.3,\r\n      showSpinner: true,\r\n      spinnerColor: 'rgba(0, 0, 0, 0.4)',\r\n      AnimatedImageComponent: Animated.Image\r\n  };\r\n\r\n  _container?: View | null;\r\n  _mounted?: boolean;\r\n\r\n  constructor (props: ParallaxImageProps) {\r\n      super(props);\r\n      this.state = {\r\n          offset: 0,\r\n          width: 0,\r\n          height: 0,\r\n          status: ParallaxImageStatus.LOADING,\r\n          animOpacity: new Animated.Value(0)\r\n      };\r\n      this._onLoad = this._onLoad.bind(this);\r\n      this._onError = this._onError.bind(this);\r\n      this._measureLayout = this._measureLayout.bind(this);\r\n  }\r\n\r\n  setNativeProps (nativeProps: { [key: string]: unknown }) {\r\n    this._container?.setNativeProps(nativeProps);\r\n  }\r\n\r\n  componentDidMount () {\r\n      this._mounted = true;\r\n\r\n      setTimeout(() => {\r\n          this._measureLayout();\r\n      }, 0);\r\n  }\r\n\r\n  componentWillUnmount () {\r\n      this._mounted = false;\r\n  }\r\n\r\n  _measureLayout () {\r\n      if (this._container) {\r\n          const {\r\n              dimensions,\r\n              carouselRef\r\n          } = this.props;\r\n\r\n          const nodeHandle = findNodeHandle(carouselRef);\r\n\r\n          if (carouselRef && nodeHandle) {\r\n              this._container.measureLayout(\r\n                  nodeHandle,\r\n                  (x, y, width, height) => {\r\n                      const offset = this.props.vertical ?\r\n                          y - (this.props.sliderHeight - this.props.itemHeight) / 2 :\r\n                          x - (this.props.sliderWidth - this.props.itemWidth) / 2;\r\n\r\n                      this.setState({\r\n                          offset: offset,\r\n                          width:\r\n                dimensions && dimensions.width ?\r\n                    dimensions.width :\r\n                    Math.ceil(width),\r\n                          height:\r\n                dimensions && dimensions.height ?\r\n                    dimensions.height :\r\n                    Math.ceil(height)\r\n                      });\r\n                  },\r\n                  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                  () => {}\r\n              );\r\n          }\r\n      }\r\n  }\r\n\r\n  _onLoad (event: NativeSyntheticEvent<ImageLoadEventData>) {\r\n      const { animOpacity } = this.state;\r\n      const { fadeDuration, onLoad } = this.props;\r\n\r\n      if (!this._mounted) {\r\n          return;\r\n      }\r\n\r\n      this.setState({ status: ParallaxImageStatus.LOADED });\r\n\r\n      if (onLoad) {\r\n          onLoad(event);\r\n      }\r\n\r\n      Animated.timing(animOpacity, {\r\n          toValue: 1,\r\n          duration: fadeDuration,\r\n          easing: Easing.out(Easing.quad),\r\n          isInteraction: false,\r\n          useNativeDriver: true\r\n      }).start(() => {\r\n          this.setState({ status: ParallaxImageStatus.TRANSITION_FINISHED });\r\n      });\r\n  }\r\n\r\n  // If arg is missing from method signature, it just won't be called\r\n  _onError (event: NativeSyntheticEvent<ImageErrorEventData>) {\r\n      const { onError } = this.props;\r\n\r\n      this.setState({ status: ParallaxImageStatus.ERROR });\r\n\r\n      if (onError) {\r\n          onError(event);\r\n      }\r\n  }\r\n\r\n  get image () {\r\n      const { status, animOpacity, offset, width, height } = this.state;\r\n      const {\r\n          scrollPosition,\r\n          // False positive :( other doesn't have the dimension key\r\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n          dimensions,\r\n          parallaxFactor,\r\n          style,\r\n          AnimatedImageComponent,\r\n          ...other\r\n      } = this.props;\r\n      const parallaxPadding = (this.props.vertical ? height : width) * parallaxFactor;\r\n      const requiredStyles = { position: 'relative' as const };\r\n      const dynamicStyles = {\r\n          width: this.props.vertical ? width : width + parallaxPadding * 2,\r\n          height: this.props.vertical ? height + parallaxPadding * 2 : height,\r\n          opacity: animOpacity,\r\n          transform: scrollPosition ?\r\n              [\r\n                  {\r\n                      translateX: !this.props.vertical ?\r\n                          scrollPosition.interpolate({\r\n                              inputRange: [offset - this.props.sliderWidth, offset + this.props.sliderWidth],\r\n                              outputRange: [-parallaxPadding, parallaxPadding],\r\n                              extrapolate: 'clamp'\r\n                          }) :\r\n                          0\r\n                  },\r\n                  {\r\n                      translateY: this.props.vertical ?\r\n                          scrollPosition.interpolate({\r\n                              inputRange: [offset - this.props.sliderHeight, offset + this.props.sliderHeight],\r\n                              outputRange: [-parallaxPadding, parallaxPadding],\r\n                              extrapolate: 'clamp'\r\n                          }) :\r\n                          0\r\n                  }\r\n              ] :\r\n              []\r\n      };\r\n\r\n      return (\r\n          <AnimatedImageComponent\r\n            {...other}\r\n            style={[styles.image, style, requiredStyles, dynamicStyles]}\r\n            onLoad={this._onLoad}\r\n            onError={status !== ParallaxImageStatus.TRANSITION_FINISHED ? this._onError : undefined} // prevent infinite-loop bug\r\n          />\r\n      );\r\n  }\r\n\r\n  get spinner () {\r\n      const { status } = this.state;\r\n      const { showSpinner, spinnerColor } = this.props;\r\n\r\n      return status === ParallaxImageStatus.LOADING && showSpinner ? (\r\n          <View style={styles.loaderContainer}>\r\n              <ActivityIndicator\r\n                size='small'\r\n                color={spinnerColor}\r\n                animating={true}\r\n              />\r\n          </View>\r\n      ) : (\r\n          false\r\n      );\r\n  }\r\n\r\n  render () {\r\n      const { containerStyle } = this.props;\r\n\r\n      return (\r\n          <View\r\n            ref={(c) => {\r\n                this._container = c;\r\n            }}\r\n            pointerEvents='none'\r\n            style={[containerStyle, styles.container]}\r\n            onLayout={this._measureLayout}\r\n          >\r\n              {this.image}\r\n              {this.spinner}\r\n          </View>\r\n      );\r\n  }\r\n}\r\n"]}