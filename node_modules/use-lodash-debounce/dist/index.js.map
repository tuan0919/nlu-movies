{"version":3,"file":"index.js","sources":["../src/use-debounce.ts"],"sourcesContent":["import { useCallback, useEffect, useState, useRef } from 'react'\nimport debounce from 'lodash.debounce'\nimport { Cancelable, DebounceSettings } from 'lodash'\n\nexport function useDebouncedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number = 0,\n  options?: DebounceSettings\n): T & Cancelable {\n  return useCallback(debounce(callback, delay, options), [\n    callback,\n    delay,\n    options,\n  ])\n}\n\nexport function useDebounce<T>(\n  value: T,\n  delay: number = 0,\n  options?: DebounceSettings\n): T {\n  const previousValue = useRef(value)\n  const [current, setCurrent] = useState(value)\n  const debouncedCallback = useDebouncedCallback(\n    (value: T) => setCurrent(value),\n    delay,\n    options\n  )\n  useEffect(() => {\n    // doesn't trigger the debounce timer initially\n    if (value !== previousValue.current) {\n      debouncedCallback(value)\n      previousValue.current = value\n      // cancel the debounced callback on clean up\n      return debouncedCallback.cancel\n    }\n  }, [value])\n\n  return current\n}\n"],"names":["useCallback","useRef","useEffect"],"mappings":";;;;;;;;;8BAKE,QAAW,EACX,KAAiB,EACjB,OAA0B;IAD1B,sBAAA,EAAA,SAAiB;IAGjB,OAAOA,iBAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE;QACrD,QAAQ;QACR,KAAK;QACL,OAAO;KACR,CAAC,CAAA;CACH;AAED,qBACE,KAAQ,EACR,KAAiB,EACjB,OAA0B;IAD1B,sBAAA,EAAA,SAAiB;IAGjB,IAAM,aAAa,GAAGC,YAAM,CAAC,KAAK,CAAC,CAAA;IAC7B,IAAA,0BAAuC,EAAtC,eAAO,EAAE,kBAAU,CAAmB;IAC7C,IAAM,iBAAiB,GAAG,oBAAoB,CAC5C,UAAC,KAAQ,IAAK,OAAA,UAAU,CAAC,KAAK,CAAC,GAAA,EAC/B,KAAK,EACL,OAAO,CACR,CAAA;IACDC,eAAS,CAAC;;QAER,IAAI,KAAK,KAAK,aAAa,CAAC,OAAO,EAAE;YACnC,iBAAiB,CAAC,KAAK,CAAC,CAAA;YACxB,aAAa,CAAC,OAAO,GAAG,KAAK,CAAA;;YAE7B,OAAO,iBAAiB,CAAC,MAAM,CAAA;SAChC;KACF,EAAE,CAAC,KAAK,CAAC,CAAC,CAAA;IAEX,OAAO,OAAO,CAAA;CACf;;;;;"}